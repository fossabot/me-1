service: photos

frameworkVersion: ">=1.0.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs8.10

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ca-central-1'}
  resourceStageBuilder: ${file(env.yml):${self:provider.stage}.resourceStageBuilder}
  memorySize: 512
  timeout: 10

  iamRoleStatements:
    - Effect: Allow
      Action:
        - KMS:Decrypt
      Resource: ${file(env.yml):${self:provider.stage}.kmsKeyArn}

  environment: ${file(env.yml):${self:provider.stage}.environment}
  environmentSecrets: # can't just include the whole obj from the env file bc for some reason the plugin won't load from external files
#    F00PX_API_KEY: ${file(env.yml):${self:provider.stage}.environmentSecrets.F00PX_API_KEY}
#    F00PX_API_SECRET: ${file(env.yml):${self:provider.stage}.environmentSecrets.F00PX_API_SECRET}
    FLICKR_API_KEY: ${file(env.yml):${self:provider.stage}.environmentSecrets.FLICKR_API_KEY}
    FLICKR_API_SECRET: ${file(env.yml):${self:provider.stage}.environmentSecrets.FLICKR_API_SECRET}
    UNSPLASH_API_KEY: ${file(env.yml):${self:provider.stage}.environmentSecrets.UNSPLASH_API_KEY}
    UNSPLASH_API_SECRET: ${file(env.yml):${self:provider.stage}.environmentSecrets.UNSPLASH_API_SECRET}
    INSTAGRAM_API_KEY: ${file(env.yml):${self:provider.stage}.environmentSecrets.INSTAGRAM_API_KEY}
    INSTAGRAM_API_SECRET: ${file(env.yml):${self:provider.stage}.environmentSecrets.INSTAGRAM_API_SECRET}
    INSTAGRAM_ACCESS_TOKEN: ${file(env.yml):${self:provider.stage}.environmentSecrets.INSTAGRAM_ACCESS_TOKEN}
    TUMBLR_API_KEY: ${file(env.yml):${self:provider.stage}.environmentSecrets.TUMBLR_API_KEY}
    TUMBLR_API_SECRET: ${file(env.yml):${self:provider.stage}.environmentSecrets.TUMBLR_API_SECRET}

package:
  individually: true

plugins:
  - serverless-secrets
  - serverless-webpack
  - serverless-offline
  - serverless-mocha-plugin

custom:
  webpack:
    webpackConfig: ./webpack.serverless.config.js
    includeModules: true
  serverlessSecrets:
    throwOnMissingSecret: true
    providerOptions:
      region: ${self:provider.region}
    keys:
      dev: "alias/serverless-dev"
      prd: "alias/serverless-prd"
  alarmTopic: arn:aws:sns:ca-central-1:471964952458:CloudWatchNotifications
  serverless-offline:
    port: 3002

functions:
  getPhotos:
    handler: serverless/handler/getPhotos.js
    events:
      - http:
          path: ""
          method: get
          cors: true
    onError: arn:aws:sns:${self:provider.region}:471964952458:${self:provider.resourceStageBuilder}-photos-dlq
  instagramAuthRedirect:
    handler: serverless/handler/instagramAuthRedirect.js
    events:
      - http:
          path: auth/instagram
          method: get
          cors: true
    onError: arn:aws:sns:${self:provider.region}:471964952458:${self:provider.resourceStageBuilder}-photos-dlq
  instagramAuthReturn:
    handler: serverless/handler/instagramAuthReturn.js
    events:
      - http:
          path: auth/instagram/redirect
          method: get
          cors: true
    onError: arn:aws:sns:${self:provider.region}:471964952458:${self:provider.resourceStageBuilder}-photos-dlq

resources:
  Resources:
    CustomDomainName:
      Type: AWS::ApiGateway::DomainName
      Properties:
        CertificateArn: ${file(env.yml):${self:provider.stage}.acmArn}
        DomainName: ${file(env.yml):${self:provider.stage}.domainName}
    Pathmapping:
      Type: AWS::ApiGateway::BasePathMapping
      DependsOn: ApiGatewayRestApi
      Properties:
        BasePath: "photos"
        DomainName: ${file(env.yml):${self:provider.stage}.domainName}
        RestApiId:
            Ref: ApiGatewayRestApi
        Stage: ${self:provider.stage}
    ErrorsAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmActions:
          - ${self:custom.alarmTopic}
        AlarmDescription: Lambda errors
        ComparisonOperator: GreaterThanOrEqualToThreshold
        EvaluationPeriods: 1
        Namespace: AWS/Lambda
        MetricName: Errors
        Period: 60
        Statistic: Sum
        Threshold: 1
        Unit: Count
    DurationAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmActions:
          - ${self:custom.alarmTopic}
        AlarmDescription: Long running lambdas
        ComparisonOperator: GreaterThanOrEqualToThreshold
        EvaluationPeriods: 1
        Namespace: AWS/Lambda
        MetricName: Duration
        Threshold: 5000
        Period: 60
        Statistic: Maximum
        Unit: Milliseconds
    Gateway4xxAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmActions:
          - ${self:custom.alarmTopic}
        AlarmDescription: 4xx Errors
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Dimensions:
          - Value: ${self:provider.stage}-photos
            Name: ApiName
          - Value: ${self:provider.stage}
            Name: Stage
        EvaluationPeriods: 1
        Namespace: AWS/ApiGateway
        MetricName: 4XXError
        Period: 60
        Statistic: Average
        Threshold: 0.1
        Unit: Count
    Gateway5xxAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmActions:
          - ${self:custom.alarmTopic}
        AlarmDescription: 5xx Errors
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Dimensions:
          - Value: ${self:provider.stage}-photos
            Name: ApiName
          - Value: ${self:provider.stage}
            Name: Stage
        EvaluationPeriods: 1
        Namespace: AWS/ApiGateway
        MetricName: 5XXError
        Period: 60
        Statistic: Average
        Threshold: 0.1
        Unit: Count
